import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:kowanas_util/database.dart';
import 'package:kowanas_util/nosql_db/nosql_adapter.dart';

import '../model.dart';

class FirestoreDB extends Database{
  final records = Map<String, Model>(); // Key is generated by getUniqueKey()
  // It's own collection from firestore
  late CollectionReference<Map<String, dynamic>> collection;
  late String name;
  // I will reuse NosqlAdapter for firestore because firestore is also nosql.
  late NosqlAdapter adapter;

  @override
  add(record) async {
    if(_isExist(record) == false) {
      final id = record.getUniqueKey();
      records[id] = record;
      collection.doc(id).set(record.toJson())
          .then((value) => records[id] = record,
            onError: (e) => print("Failed to add ${id} to ${name} by ${e}"));
      return true;
    }
    return false;
  }

  _isExist(record) => records.values.any((e)=>e==record.getUniqueKey());

  @override
  read() {
    return records.values;
  }

  _load() async{
    await collection.get().then((snapshot){
      snapshot.docs.forEach((e) {
        final record = adapter.fromJson(e.data());
        records[record.getUniqueKey()] = record;
      });
    });
  }

  @override
  connect(name, adapter) async {
    this.name = name;
    this.adapter = adapter;
    try {
      collection = await FirebaseFirestore.instance.collection(name);
    }catch(e){
      print ("Failed to connect ${name} by ${e}");
    }
    await _load();
    return this;
  }

  @override
  delete(record) async{
    await collection.doc(record.getUniqueKey()).delete()
        .then((doc) => records.remove(record),
          onError: (e){
            final id = record.getUniqueKey();
            print ("Failed to delete ${id} from ${name} by ${e}");
          });
  }

  @override
  update(record) async{
    await collection.doc(record.getUniqueKey()).set(record.toJson());
  }
}